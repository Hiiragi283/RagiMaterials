import org.jetbrains.gradle.ext.Gradle

plugins {
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.16"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("eclipse")
    id("java")
    id("java-library")
    id("maven-publish")
    id("org.jetbrains.gradle.plugin.idea-ext") version("1.1.7")
    id("org.jetbrains.kotlin.jvm") version("1.8.22")
    id("org.jetbrains.kotlin.plugin.serialization") version("1.8.22")
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = "1.12.2"

    // MCP Mappings
    mcpMappingChannel = "stable"
    mcpMappingVersion = "39"

    // Set username here, the UUID will be looked up automatically
    username = "Hiiragi283"

    // Add any additional tweaker classes here
    // extraTweakClasses.add("org.spongepowered.asm.launch.MixinTweaker")

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << "-Dfml.coreMods.load=" + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << "-Dmixin.hotSwap=true"
        args << "-Dmixin.checks.interfaces=true"
        args << "-Dmixin.debug.export=true"
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies" Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    injectedTags.put("MOD_ID", project.mod_id)
    injectedTags.put("MOD_NAME", project.mod_name)
    injectedTags.put("VERSION", project.version)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class" name here:
    outputClassName.set("${project.group}.RMReference")
}

repositories {
    maven {
        name "CleanroomMC Maven"
        url "https://maven.cleanroommc.com"
    }
    maven {
        name "SpongePowered Maven"
        url "https://repo.spongepowered.org/maven"
    }
    maven {
        name "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenLocal()
    mavenCentral() // Must be last for caching to work
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation "com.cleanroommc:assetmover:2.5"
    }
    if (project.use_mixins.toBoolean()) {
        implementation "zone.rong:mixinbooter:7.1"
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")

    runtimeOnly(rfg.deobf("curse.maven:baubles-227083:2518667"))
    runtimeOnly(rfg.deobf("curse.maven:codechicken-lib-1-8-242818:2779848"))
    runtimeOnly(rfg.deobf("curse.maven:dans-mouse-tweaks-461660:3962479"))
    runtimeOnly(rfg.deobf("curse.maven:forgelin-continuous-456403:4528552"))
    runtimeOnly(rfg.deobf("curse.maven:had-enough-items-557549:4451828"))
    runtimeOnly(rfg.deobf("curse.maven:infinity-item-editor-290958:3802759"))
    runtimeOnly(rfg.deobf("curse.maven:itemzoom-261725:2643616"))
    runtimeOnly(rfg.deobf("curse.maven:placebo-283644:2694382"))
    runtimeOnly(rfg.deobf("curse.maven:the-one-probe-245211:2667280"))

    //Botania
    if (enable_botania.toBoolean()) {
        implementation(rfg.deobf("curse.maven:botania-225643:3330934"))
    }

    //Embers
    if (enable_embers.toBoolean()) {
        implementation(rfg.deobf("curse.maven:embers-rekindled-300777:3695248"))
    }

    //Ender IO
    if (enable_ender_io.toBoolean()) {
        implementation(rfg.deobf("curse.maven:endercore-231868:2972849"))
        implementation(rfg.deobf("curse.maven:ender-io-64578:3328811"))
    }

    //Industrial Craft 2
    if (enable_ic2_ex.toBoolean()) {
        implementation(rfg.deobf("curse.maven:industrial-craft-242638:3838713"))
    }

    //Mekanism
    if (enable_mekanism.toBoolean()) {
        implementation(rfg.deobf("curse.maven:mekanism-ce-399904:4557906"))
    }

    //Project Red
    if (enable_project_red.toBoolean()) {
        implementation(rfg.deobf("curse.maven:cb-multipart-258426:2755790"))
        implementation(rfg.deobf("curse.maven:mrtjpcore-229002:2735197"))
        implementation(rfg.deobf("curse.maven:project-red-core-228702:2745545"))
    }

    //RailCraft
    if (enable_railcraft.toBoolean()) {
        implementation(rfg.deobf("curse.maven:railcraft-51195:3853491"))
    }

    //Thaumcraft
    if (enable_thaum.toBoolean()) {
        implementation(rfg.deobf("curse.maven:thaumcraft-223628:2629023"))
    }

    //Thermal Series
    if (enable_thermal.toBoolean()) {
        implementation(rfg.deobf("curse.maven:cofh-core-69162:2920433"))
        implementation(rfg.deobf("curse.maven:cofh-world-271384:2920434"))
        implementation(rfg.deobf("curse.maven:redstone-flux-270789:2920436"))
        implementation(rfg.deobf("curse.maven:thermal-expansion-69163:2926431"))
        implementation(rfg.deobf("curse.maven:thermal-foundation-222880:2926428"))
    }

    //Tinker's Construct
    if (enable_tcon.toBoolean()) {
        implementation(rfg.deobf("curse.maven:mantle-74924:2713386"))
        implementation(rfg.deobf("curse.maven:tinkers-construct-74072:2902483"))
    }

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins("org.spongepowered:mixin:0.8.3", "mixins.ragi_materials.refmap.json")
        api(mixin) {
            transitive = false
        }
        annotationProcessor "org.ow2.asm:asm-debug-all:5.2"
        annotationProcessor "com.google.guava:guava:24.1.1-jre"
        annotationProcessor "com.google.code.gson:gson:2.8.6"
        annotationProcessor(mixin) {
            transitive = false
        }
    }

}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(["mcmod.info", "pack.mcmeta"]) { fcd ->
        // Replace version and mcversion
        fcd.expand(
                "version": project.version,
                "mcversion": minecraft_version
        )
    }

    if (use_access_transformer.toBoolean()) {
        rename "(.+_at.cfg)", "META-INF/$it" // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (use_coremod.toBoolean()) {
            attribute_map["FMLCorePlugin"] = coremod_plugin_class_name
            if (include_mod.toBoolean()) {
                attribute_map["FMLCorePluginContainsFMLMod"] = true
                attribute_map["ForceLoadAsMod"] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (use_access_transformer.toBoolean()) {
            attribute_map["FMLAT"] = "ragi_materials_at.cfg"
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { """ + it + """ }.join(" ")
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}